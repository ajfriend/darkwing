---
title: NYC Trips Example Analysis
jupyter: python3
format:
  html:
    toc: true
---

We'll use the NYC Taxi data set to demonstrate analyzing data interactively with Darkwing.
We'll compare Taxi trip fares by pickup location between January and February 2010.

We discretize locations into hexagonal bins with H3.
One of the benefits of using DuckDB directly, is that we can use anything
from the DuckDB ecosystem, like its [H3 extension](https://github.com/isaacbrodsky/h3-duckdb).


# Loading data

First, load a table from a local Parquet file and preview its contents.

```{python}
import duckboat as uck
t1 = uck.Table('data/yellow_tripdata_2010-01.parquet')
t2 = uck.Table('data/yellow_tripdata_2010-02.parquet')
t1.do('limit 7')
```

We can get a list of columns with `t1.columns`.

```{python}
t1.columns
```

# Inspecting and transforming data interactively

You can run one or more SQL expressions with the `Table.do()` method.

Expressions are in standard DuckDB SQL, with some small changes:

- `from <table_name>` is automatically inserted into the expression for you.
- `select ...` is optional; if omitted, `select *` will be inserted.

We'll see a few examples of what we can do below.

Convert pickup latitude/longitude locations to resolution 8 H3 cells.
Resolution 8 cells are about 0.7 km^2 in size.

```{python}
x = t1.do("""
select
    *,
    h3_latlng_to_cell(pickup_latitude, pickup_longitude, 8)
        as hexid,
""")
x.do('limit 2')
```

Compute the average of `total_amount` for each H3 cell, along with the number of trips:

```{python}
x = x.do("""
select
    hexid,
    avg(total_amount) 
        as amount,
    count(*)
        as num,
group by
    1
""")
x.do('limit 2')
```

Convert the H3 cell id to its hexadecimal representation:

```{python}
x = x.do("""
select
    h3_h3_to_string(hexid)
        as hexid,
    amount,
    num,
""")
x.do('limit 2')
```


# Grouping transforms with lists and functions

Note that `Table.do()` also accepts a sequence of strings,
so you could write all of the previous steps with a single function call.

```{python}
t1.do(
    'select *, h3_latlng_to_cell(pickup_latitude, pickup_longitude, 8) as hexid',
    'select hexid, avg(total_amount) as amount, count(*) as num group by 1',
    'select h3_h3_to_string(hexid) as hexid, amount, num',
    'limit 5'
)
```

To help organize things, we can collect a sequence of steps as a list of strings.

```{python}
avg_list = [
    'select *, h3_latlng_to_cell(pickup_latitude, pickup_longitude, 8) as hexid',
    'select hexid, avg(total_amount) as amount, count(*) as num group by 1',
    'select h3_h3_to_string(hexid) as hexid, amount, num',
]
```

We can apply the sequence of steps in `avg_list` to table `t1` in multiple ways.
If `Table.do()` encounters a list, it will apply each element of the list in sequence recursively, which means each of the following are equivalent:

```{python}
#| output: false
t1.do(*avg_list)
t1.do(avg_list)
t1.do([avg_list])
t1.do([[avg_list]])
```

We can also wrap operations in a Python function, which `Table.do()` can also handle.

```{python}
def avg_func(tbl):
    """
    tbl: [pickup_latitude, pickup_longitude, total_amount]
    returns: [hexid, amount, num]
    """
    return tbl.do(avg_list)
```

The following are equivalent:

```{python}
#| output: false
avg_func(t1)
t1.do(avg_func)
t1.do([avg_func])
```

We can build up complex nested expressions by combining functions, query strings, and lists, so the following are equivalent:

```{python}
#| output: false
t1.do(avg_func, 'where num > 100')
t1.do(avg_list, 'where num > 100')
t1.do([avg_func, 'where num > 100'])
t1.do([avg_list, 'where num > 100'])
```

# Exploration and filtering

Exploring the data, we notice there are many trips in February that have zero or negative fare.
We'll want to filter those out.

```{python}
t2.do("""
select
    total_amount > 0,
    count(*),
group by
    1
""")
```

We also spot many trips where the lat/lng is erroneously listed as `(0,0)`:

```{python}
t1.do("""
select
    (pickup_longitude = 0) or (pickup_latitude = 0),
    count(*),
group by
    1
""")
```

After aggregating, we also notice there are lots of hexes with only a few trips.
Let's say we'll only look at hexes with at least 100 trips.

```{python}
t1.do(
    avg_func,
    """
    select
        cast(log10(num)+1 as int)
            as num_digits,
        count(*),
    group by 1
    order by 1
    """
)
```


# Joins

We want to compute average fares for hexes and compare them across January and February. We compute the averages like above, but also want to exlude hexes with only a few trips. So we extend the data pipeline to filter out such hexes, and apply the same operation to the datasets for each month.

```{python}
t1 = uck.Table('data/yellow_tripdata_2010-01.parquet')
t2 = uck.Table('data/yellow_tripdata_2010-02.parquet')

f = [
    'where (pickup_longitude != 0) and (pickup_latitude != 0)',
    'where total_amount > 0',
    avg_list,
    'where num > 100',
]

t1 = t1.do(f)
t2 = t2.do(f)

t2
```

To perform a join, we need two tables in hand, which we can do with `duckboat.Database()`:

```{python}
db = uck.Database(t1=t1, t2=t2)
```

```{python}
db['t1']
```


Note that because evaluation is lazy, the expressions to build each table in
the database will recompute each time you compute or view a derived expression.
If you want to avoid that, you can materialize the computation and create a new database.
There is no need to do this if you don't mind recomputing.


```{python}
db = uck.Database(**db.hold())
```

```{python}
db
```

The following will run quickly.

```{python}
db.do('from t1')
```

You can run DuckDB SQL on a `duckboat.Database`, but now you should explicitly mention the table(s) you want to work with (but that's usually what you want anyway when doing a join.)

```{python}
out = db.do("""
select
      hexid
    , t1.amount
        as fare_jan
    , t2.amount
        as fare_feb
from
    t1
inner join
    t2
using
    (hexid)
""").do("""
select
      *
    , fare_feb - fare_jan
        as fare_change
order by
    fare_change
""")
out
```

```{python}
import matplotlib.pyplot as plt

df = out.df()

fig, ax = plt.subplots()
ax.plot([0,70], [0,70], color='k', linestyle='--')
df.plot.scatter(x='fare_jan', y='fare_feb', alpha=.6, ax=ax)
plt.grid()
```

# End-to-end example


```{python}
import duckboat as uck

core = [
    'select *, h3_latlng_to_cell(pickup_latitude, pickup_longitude, 8) as hexid',
    'select hexid, avg(total_amount) as amount, count(*) as num group by 1',
    'select h3_h3_to_string(hexid) as hexid, amount, num',
]

core_with_filters = [
    'where (pickup_longitude != 0) and (pickup_latitude != 0)',
    'where total_amount > 0',
    core,
    'where num > 100',
]

db = uck.Database(
    t1 = uck.Table('data/yellow_tripdata_2010-01.parquet').do(core_with_filters),
    t2 = uck.Table('data/yellow_tripdata_2010-02.parquet').do(core_with_filters),
)

db.do("""
    select
        hexid,
        t1.amount  as  fare_jan,
        t2.amount  as  fare_feb,
    from        t1
    inner join  t2
    using       (hexid)
""",
    'select *, fare_feb - fare_jan as fare_change',
    'order by fare_change',
)
```
