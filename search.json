[
  {
    "objectID": "trips_analysis.html",
    "href": "trips_analysis.html",
    "title": "NYC Trips Example Analysis",
    "section": "",
    "text": "We’ll use the NYC Taxi data set to demonstrate analyzing data interactively with Darkwing. We’ll compare Taxi trip fares by pickup location between January and February 2010.\nWe discretize locations into hexagonal bins with H3. One of the benefits of using DuckDB directly, is that we can use anything from the DuckDB ecosystem, like its H3 extension.\n\n\nLoading data\nFirst, load a table from a local Parquet file and preview its contents.\n\nimport darkwing as dw\nt1 = dw.Table('data/yellow_tripdata_2010-01.parquet')\nt2 = dw.Table('data/yellow_tripdata_2010-02.parquet')\nt1.do('limit 7')\n\n┌───────────┬─────────────────────┬─────────────────────┬─────────────────┬────────────────────┬────────────────────┬─────────────────┬───────────┬────────────────────┬────────────────────┬──────────────────┬──────────────┬─────────────┬───────────┬─────────┬────────────┬──────────────┬──────────────┐\n│ vendor_id │   pickup_datetime   │  dropoff_datetime   │ passenger_count │   trip_distance    │  pickup_longitude  │ pickup_latitude │ rate_code │ store_and_fwd_flag │ dropoff_longitude  │ dropoff_latitude │ payment_type │ fare_amount │ surcharge │ mta_tax │ tip_amount │ tolls_amount │ total_amount │\n│  varchar  │       varchar       │       varchar       │      int64      │       double       │       double       │     double      │  varchar  │      varchar       │       double       │      double      │   varchar    │   double    │  double   │ double  │   double   │    double    │    double    │\n├───────────┼─────────────────────┼─────────────────────┼─────────────────┼────────────────────┼────────────────────┼─────────────────┼───────────┼────────────────────┼────────────────────┼──────────────────┼──────────────┼─────────────┼───────────┼─────────┼────────────┼──────────────┼──────────────┤\n│ VTS       │ 2010-01-26 07:41:00 │ 2010-01-26 07:45:00 │               1 │               0.75 │         -73.956778 │        40.76775 │ 1         │ NULL               │         -73.965957 │        40.765232 │ CAS          │         4.5 │       0.0 │     0.5 │        0.0 │          0.0 │          5.0 │\n│ DDS       │ 2010-01-30 23:31:00 │ 2010-01-30 23:46:12 │               1 │                5.9 │ -73.99611799999998 │       40.763932 │ 1         │ NULL               │ -73.98151199999998 │        40.741193 │ CAS          │        15.3 │       0.5 │     0.5 │        0.0 │          0.0 │         16.3 │\n│ DDS       │ 2010-01-18 20:22:20 │ 2010-01-18 20:38:12 │               1 │                4.0 │         -73.979673 │        40.78379 │ 1         │ NULL               │ -73.91785199999998 │         40.87856 │ CAS          │        11.7 │       0.5 │     0.5 │        0.0 │          0.0 │         12.7 │\n│ VTS       │ 2010-01-09 01:18:00 │ 2010-01-09 01:35:00 │               2 │                4.7 │         -73.977922 │       40.763997 │ 1         │ NULL               │ -73.92390799999998 │        40.759725 │ CAS          │        13.3 │       0.5 │     0.5 │        0.0 │          0.0 │         14.3 │\n│ CMT       │ 2010-01-18 19:10:14 │ 2010-01-18 19:17:07 │               1 │ 0.5999999999999999 │         -73.990924 │       40.734682 │ 1         │ 0                  │ -73.99551099999998 │        40.739088 │ Cre          │         5.3 │       0.0 │     0.5 │       0.87 │          0.0 │         6.67 │\n│ DDS       │ 2010-01-23 18:40:25 │ 2010-01-23 18:54:51 │               1 │                3.3 │                0.0 │             0.0 │ 1         │ NULL               │                0.0 │              0.0 │ CRE          │        10.5 │       0.0 │     0.5 │        1.0 │          0.0 │         12.0 │\n│ VTS       │ 2010-01-17 09:18:00 │ 2010-01-17 09:25:00 │               1 │               1.33 │         -73.993747 │       40.754917 │ 1         │ NULL               │ -73.98471499999998 │        40.755927 │ CAS          │         6.1 │       0.0 │     0.5 │        0.0 │          0.0 │          6.6 │\n└───────────┴─────────────────────┴─────────────────────┴─────────────────┴────────────────────┴────────────────────┴─────────────────┴───────────┴────────────────────┴────────────────────┴──────────────────┴──────────────┴─────────────┴───────────┴─────────┴────────────┴──────────────┴──────────────┘\n\n\nWe can get a list of columns with t1.columns.\n\nt1.columns\n\n['vendor_id',\n 'pickup_datetime',\n 'dropoff_datetime',\n 'passenger_count',\n 'trip_distance',\n 'pickup_longitude',\n 'pickup_latitude',\n 'rate_code',\n 'store_and_fwd_flag',\n 'dropoff_longitude',\n 'dropoff_latitude',\n 'payment_type',\n 'fare_amount',\n 'surcharge',\n 'mta_tax',\n 'tip_amount',\n 'tolls_amount',\n 'total_amount']\n\n\n\n\nInspecting and transforming data interactively\nYou can run one or more SQL expressions with the Table.do() method.\nExpressions are in standard DuckDB SQL, with some small changes:\n\nfrom &lt;table_name&gt; is automatically inserted into the expression for you.\nselect ... is optional; if omitted, select * will be inserted.\n\nWe’ll see a few examples of what we can do below.\nConvert pickup latitude/longitude locations to resolution 8 H3 cells. Resolution 8 cells are about 0.7 km^2 in size\n\nx = t1.do(\"\"\"\nselect\n    *,\n    h3_latlng_to_cell(pickup_latitude, pickup_longitude, 8)\n        as hexid,\n\"\"\")\nx.do('limit 2')\n\n┌───────────┬─────────────────────┬─────────────────────┬─────────────────┬───────────────┬────────────────────┬─────────────────┬───────────┬────────────────────┬────────────────────┬──────────────────┬──────────────┬─────────────┬───────────┬─────────┬────────────┬──────────────┬──────────────┬────────────────────┐\n│ vendor_id │   pickup_datetime   │  dropoff_datetime   │ passenger_count │ trip_distance │  pickup_longitude  │ pickup_latitude │ rate_code │ store_and_fwd_flag │ dropoff_longitude  │ dropoff_latitude │ payment_type │ fare_amount │ surcharge │ mta_tax │ tip_amount │ tolls_amount │ total_amount │       hexid        │\n│  varchar  │       varchar       │       varchar       │      int64      │    double     │       double       │     double      │  varchar  │      varchar       │       double       │      double      │   varchar    │   double    │  double   │ double  │   double   │    double    │    double    │       uint64       │\n├───────────┼─────────────────────┼─────────────────────┼─────────────────┼───────────────┼────────────────────┼─────────────────┼───────────┼────────────────────┼────────────────────┼──────────────────┼──────────────┼─────────────┼───────────┼─────────┼────────────┼──────────────┼──────────────┼────────────────────┤\n│ VTS       │ 2010-01-26 07:41:00 │ 2010-01-26 07:45:00 │               1 │          0.75 │         -73.956778 │        40.76775 │ 1         │ NULL               │         -73.965957 │        40.765232 │ CAS          │         4.5 │       0.0 │     0.5 │        0.0 │          0.0 │          5.0 │ 613229522950553599 │\n│ DDS       │ 2010-01-30 23:31:00 │ 2010-01-30 23:46:12 │               1 │           5.9 │ -73.99611799999998 │       40.763932 │ 1         │ NULL               │ -73.98151199999998 │        40.741193 │ CAS          │        15.3 │       0.5 │     0.5 │        0.0 │          0.0 │         16.3 │ 613229551343894527 │\n└───────────┴─────────────────────┴─────────────────────┴─────────────────┴───────────────┴────────────────────┴─────────────────┴───────────┴────────────────────┴────────────────────┴──────────────────┴──────────────┴─────────────┴───────────┴─────────┴────────────┴──────────────┴──────────────┴────────────────────┘\n\n\nCompute the average of total_amount for each H3 cell, along with the number of trips\n\nx = x.do(\"\"\"\nselect\n    hexid,\n    avg(total_amount) \n        as amount,\n    count(*)\n        as num,\ngroup by\n    1\n\"\"\")\nx.do('limit 2')\n\n┌────────────────────┬────────────────────┬────────┐\n│       hexid        │       amount       │  num   │\n│       uint64       │       double       │ int64  │\n├────────────────────┼────────────────────┼────────┤\n│ 613229522954747903 │  8.755456601197546 │ 140626 │\n│ 613229522940067839 │ 11.282130774389215 │ 105877 │\n└────────────────────┴────────────────────┴────────┘\n\n\n\n# Convert the H3 cell id to its hexadecimal representation\nx = x.do(\"\"\"\nselect\n    h3_h3_to_string(hexid)\n        as hexid,\n    amount,\n    num,\n\"\"\")\nx.do('limit 2')\n\n┌─────────────────┬────────────────────┬────────┐\n│      hexid      │       amount       │  num   │\n│     varchar     │       double       │ int64  │\n├─────────────────┼────────────────────┼────────┤\n│ 882a100897fffff │  8.755456601197542 │ 140626 │\n│ 882a100889fffff │ 11.282130774389215 │ 105877 │\n└─────────────────┴────────────────────┴────────┘\n\n\n\n\nGrouping transforms with lists and functions\nNote that Table.do() also accepts a sequence of strings, so you could write all of the previous steps with a single function call.\n\nt1.do(\n    'select *, h3_latlng_to_cell(pickup_latitude, pickup_longitude, 8) as hexid',\n    'select hexid, avg(total_amount) as amount, count(*) as num group by 1',\n    'select h3_h3_to_string(hexid) as hexid, amount, num',\n    'limit 5'\n)\n\n┌─────────────────┬────────────────────┬────────┐\n│      hexid      │       amount       │  num   │\n│     varchar     │       double       │ int64  │\n├─────────────────┼────────────────────┼────────┤\n│ 882a1008b3fffff │  9.949875167611046 │ 346785 │\n│ 882a107219fffff │  10.43954911679714 │ 104506 │\n│ 882a100895fffff │   9.83854816036588 │ 106706 │\n│ 882a10721bfffff │ 10.650209316209915 │ 308194 │\n│ 882a100aa9fffff │  17.60921714488133 │   5646 │\n└─────────────────┴────────────────────┴────────┘\n\n\nTo help organize things, we can collect a sequence of steps as a list of strings.\n\navg_list = [\n    'select *, h3_latlng_to_cell(pickup_latitude, pickup_longitude, 8) as hexid',\n    'select hexid, avg(total_amount) as amount, count(*) as num group by 1',\n    'select h3_h3_to_string(hexid) as hexid, amount, num',\n]\n\nWe can apply the sequence of steps in avg_list to table t1 in multiple ways. If Table.do() encounters a list, it will apply each element of the list in sequence recursively, which means each of the following are equivalent:\n\nt1.do(*avg_list)\nt1.do(avg_list)\nt1.do([avg_list])\nt1.do([[avg_list]])\n\nWe can also wrap operations in a Python function, which Table.do() can also handle.\n\ndef avg_func(tbl):\n    \"\"\"\n    tbl: [pickup_latitude, pickup_longitude, total_amount]\n    returns: [hexid, amount, num]\n    \"\"\"\n    return tbl.do(avg_list)\n\nThe following are equivalent:\n\navg_func(t1)\nt1.do(avg_func)\nt1.do([avg_func])\n\nWe can build up complex nested expressions by combining functions, query strings, and lists, so the following are equivalent:\n\nt1.do(avg_func, 'where num &gt; 100')\nt1.do(avg_list, 'where num &gt; 100')\nt1.do([avg_func, 'where num &gt; 100'])\nt1.do([avg_list, 'where num &gt; 100'])\n\n\n\nExploration and filtering\nExploring the data, we notice there are many trips in February that have zero or negative fare. We’ll want to filter those out.\n\nt2.do(\"\"\"\nselect\n    total_amount &gt; 0,\n    count(*),\ngroup by\n    1\n\"\"\")\n\n┌────────────────────┬──────────────┐\n│ (total_amount &gt; 0) │ count_star() │\n│      boolean       │    int64     │\n├────────────────────┼──────────────┤\n│ false              │        11448 │\n│ true               │     11133961 │\n└────────────────────┴──────────────┘\n\n\nWe also spot many trips where the lat/lng is erroneously listed as (0,0):\n\nt1.do(\"\"\"\nselect\n    (pickup_longitude = 0) or (pickup_latitude = 0),\n    count(*),\ngroup by\n    1\n\"\"\")\n\n┌───────────────────────────────────────────────────┬──────────────┐\n│ ((pickup_longitude = 0) OR (pickup_latitude = 0)) │ count_star() │\n│                      boolean                      │    int64     │\n├───────────────────────────────────────────────────┼──────────────┤\n│ false                                             │     14595440 │\n│ true                                              │       268338 │\n└───────────────────────────────────────────────────┴──────────────┘\n\n\nAfter aggregating, we also notice there are lots of hexes with only a few trips. Let’s say we’ll only look at hexes with at least 100 trips.\n\nt1.do(\n    avg_func,\n    \"\"\"\n    select\n        cast(log10(num)+1 as int)\n            as num_digits,\n        count(*),\n    group by 1\n    order by 1\n    \"\"\"\n)\n\n┌────────────┬──────────────┐\n│ num_digits │ count_star() │\n│   int32    │    int64     │\n├────────────┼──────────────┤\n│          1 │         5907 │\n│          2 │         1784 │\n│          3 │          619 │\n│          4 │          165 │\n│          5 │           58 │\n│          6 │           43 │\n│          7 │           18 │\n└────────────┴──────────────┘\n\n\n\n\nJoins\nWe want to compute average fares for hexes and compare them across January and February. We compute the averages like above, but also want to exlude hexes with only a few trips. So we extend the data pipeline to filter out such hexes, and apply the same operation to the datasets for each month.\n\nt1 = dw.Table('data/yellow_tripdata_2010-01.parquet')\nt2 = dw.Table('data/yellow_tripdata_2010-02.parquet')\n\nf = [\n    'where total_amount &gt; 0',\n    avg_list,\n    'where num &gt; 100',\n]\n\nt1 = t1.do(f)\nt2 = t2.do(f)\n\nt2\n\n┌─────────────────┬────────────────────┬────────┐\n│      hexid      │       amount       │  num   │\n│     varchar     │       double       │ int64  │\n├─────────────────┼────────────────────┼────────┤\n│ 882a103b1dfffff │  41.60843857906562 │  42282 │\n│ 882a10721bfffff │ 10.803940138613441 │ 244565 │\n│ 882a100f65fffff │ 19.754570858283437 │    501 │\n│ 882a107219fffff │ 10.513909327172973 │  86575 │\n│ 882a100d4dfffff │   10.6001635963156 │  49940 │\n│ 882a1008b3fffff │ 10.126875919361238 │ 260371 │\n│ 882a100895fffff │ 10.017064441077808 │  73928 │\n│ 882a100d6dfffff │   9.90945034330094 │ 106612 │\n│ 882a1072ddfffff │ 11.150639065452669 │  17463 │\n│ 882a100de9fffff │ 11.959380390075628 │   7537 │\n│        ·        │                ·   │     ·  │\n│        ·        │                ·   │     ·  │\n│        ·        │                ·   │     ·  │\n│ 882a100f63fffff │             10.285 │    156 │\n│ 882a100ab9fffff │ 11.287396449704142 │    338 │\n│ 882a107237fffff │  19.51344262295082 │    122 │\n│ 882a100f09fffff │ 12.650485436893202 │    103 │\n│ 882a100e81fffff │ 12.678333333333335 │    126 │\n│ 882a100c3dfffff │ 12.473189655172416 │    116 │\n│ 882a107401fffff │  9.635284552845528 │    123 │\n│ 882a100c19fffff │  14.04148387096774 │    155 │\n│ 882a100a19fffff │ 12.468518518518518 │    135 │\n│ 882a100d95fffff │ 14.229345794392524 │    107 │\n├─────────────────┴────────────────────┴────────┤\n│ 444 rows (20 shown)                 3 columns │\n└───────────────────────────────────────────────┘\n\n\nTo perform a join, you need two tables in on place. In Darkwing, such a place is a Database.\n\ndb = dw.Database(t1=t1, t2=t2)\n\n\ndb['t1']\n\n┌─────────────────┬────────────────────┬────────┐\n│      hexid      │       amount       │  num   │\n│     varchar     │       double       │ int64  │\n├─────────────────┼────────────────────┼────────┤\n│ 882a100d65fffff │ 10.816309067189671 │ 666127 │\n│ 882a100889fffff │ 11.282130774389216 │ 105877 │\n│ 882a100897fffff │  8.755456601197544 │ 140626 │\n│ 882a1008c3fffff │ 12.251557967709575 │  43852 │\n│ 882a1008bbfffff │   9.67052480701034 │ 288487 │\n│ 882a100f57fffff │  28.70774723824092 │  71965 │\n│ 882a100d45fffff │ 10.594611812368376 │ 185619 │\n│ 882a107291fffff │ 14.603827150293313 │  12103 │\n│ 882a100da7fffff │ 12.546433862433863 │  15120 │\n│ 882a100ab3fffff │ 10.936395156851951 │   1817 │\n│        ·        │          ·         │     ·  │\n│        ·        │          ·         │     ·  │\n│        ·        │          ·         │     ·  │\n│ 882a107207fffff │ 16.860051282051284 │    195 │\n│ 88754e64d3fffff │         10.3846875 │    192 │\n│ 882a10762dfffff │ 14.620599999999998 │    150 │\n│ 882a107731fffff │  13.23442748091603 │    131 │\n│ 882a103b47fffff │  26.62735294117647 │    204 │\n│ 882a107247fffff │ 16.278571428571425 │    308 │\n│ 882a1072bbfffff │  24.44369565217391 │    230 │\n│ 882a100a99fffff │ 10.584477611940299 │    134 │\n│ 882a100f55fffff │ 12.775407407407409 │    135 │\n│ 882a100acdfffff │ 11.756525423728815 │    118 │\n├─────────────────┴────────────────────┴────────┤\n│ 504 rows (20 shown)                 3 columns │\n└───────────────────────────────────────────────┘\n\n\n\n# but note that because evaluation is lazy, it will recompute each time.\n# If you want to avoid that, you can materialize the computation and create a new database. Note there is no need to do this if you don't mind recomputing.\n\n\ndb = db.hold()\n\n\ndb\n\nDatabase:\n    t1: 504 x ['hexid', 'amount', 'num']\n    t2: 444 x ['hexid', 'amount', 'num']\n\n\n\n# NOTE: maybe confusing to users who now see a new view of their table...\n# I wonder if caching the relation, or making it a property is the way to go...\n# TODO: how to unify the representation between Table and a table in a Database? And reveal the underlying representation (string, df, arrow, etc.)\ndb.do('from t1')\n\n┌─────────────────┬────────────────────┬────────┐\n│      hexid      │       amount       │  num   │\n│     varchar     │       double       │ int64  │\n├─────────────────┼────────────────────┼────────┤\n│ 882a100889fffff │ 11.282130774389216 │ 105877 │\n│ 882a1008bbfffff │  9.670524807010342 │ 288487 │\n│ 882a100d45fffff │ 10.594611812368374 │ 185619 │\n│ 882a100d65fffff │ 10.816309067189671 │ 666127 │\n│ 882a100d17fffff │ 12.121935231539426 │   6392 │\n│ 882a107291fffff │ 14.603827150293311 │  12103 │\n│ 882a100f57fffff │ 28.707747238240923 │  71965 │\n│ 882a100da5fffff │   12.8694763361526 │  11114 │\n│ 882a100897fffff │  8.755456601197544 │ 140626 │\n│ 882a1008c7fffff │ 12.747035087719299 │   1710 │\n│        ·        │          ·         │     ·  │\n│        ·        │          ·         │     ·  │\n│        ·        │          ·         │     ·  │\n│ 882a100ae5fffff │ 15.114158415841583 │    101 │\n│ 882a107055fffff │ 22.933666666666664 │    120 │\n│ 882a100dbbfffff │ 13.068114285714286 │    175 │\n│ 882a100c4bfffff │ 11.117826086956523 │    184 │\n│ 882a1001adfffff │ 13.115315315315314 │    111 │\n│ 882a100f01fffff │ 11.777862903225806 │    248 │\n│ 882a107703fffff │  10.57219512195122 │    164 │\n│ 882a100e83fffff │ 13.868405797101452 │    138 │\n│ 882a100e03fffff │ 13.148079470198676 │    151 │\n│ 882a100c07fffff │ 11.367704918032786 │    122 │\n├─────────────────┴────────────────────┴────────┤\n│ 504 rows (20 shown)                 3 columns │\n└───────────────────────────────────────────────┘\n\n\n\n# You can execute duckdb sql on a database, but now you should explicitly mention the table you want to work with (but that's usually what you want anyway, when doing a join.)\n\n\nout = db.do(\"\"\"\nselect\n      hexid\n    , t1.amount\n        as fare_jan\n    , t2.amount\n        as fare_feb\nfrom\n    t1\ninner join\n    t2\nusing\n    (hexid)\n\"\"\").do(\"\"\"\nselect\n      *\n    , fare_feb - fare_jan\n        as fare_change\norder by\n    fare_change\n\"\"\")\nout\n\n┌─────────────────┬────────────────────┬────────────────────┬─────────────────────┐\n│      hexid      │      fare_jan      │      fare_feb      │     fare_change     │\n│     varchar     │       double       │       double       │       double        │\n├─────────────────┼────────────────────┼────────────────────┼─────────────────────┤\n│ 882a1071adfffff │  69.73084615384616 │ 58.737914798206276 │ -10.992931355639882 │\n│ 882a100c01fffff │ 27.110503597122307 │ 20.741372549019605 │  -6.369131048102702 │\n│ 882a100e37fffff │  33.03063551401869 │ 28.065557655954635 │  -4.965077858064056 │\n│ 882a1072e7fffff │ 42.255209580838326 │  38.42423076923077 │  -3.830978811607558 │\n│ 882a1008e9fffff │ 17.742466666666665 │ 14.009843750000002 │ -3.7326229166666636 │\n│ 882a1008e7fffff │ 14.852932330827066 │ 11.121284403669724 │ -3.7316479271573417 │\n│ 882a107207fffff │ 16.860051282051284 │ 13.165116279069766 │ -3.6949350029815182 │\n│ 882a100e85fffff │ 29.665849999999995 │  26.64545454545455 │ -3.0203954545454437 │\n│ 882a100cc1fffff │ 18.814318181818184 │  15.84008695652174 │ -2.9742312252964442 │\n│ 882a10705bfffff │  25.10495283018868 │  22.22838565022421 │  -2.876567179964468 │\n│        ·        │          ·         │          ·         │           ·         │\n│        ·        │          ·         │          ·         │           ·         │\n│        ·        │          ·         │          ·         │           ·         │\n│ 882a10723bfffff │  36.69252998909488 │ 42.577538896746816 │   5.885008907651937 │\n│ 882a1072e3fffff │   22.5888996763754 │ 28.593956521739123 │   6.005056845363722 │\n│ 882a107239fffff │ 30.491762376237624 │   36.8459880239521 │   6.354225647714479 │\n│ 882a107231fffff │  25.71543147208122 │ 33.134042553191485 │   7.418611081110264 │\n│ 882a103b61fffff │ 38.679219251336896 │  46.58243243243242 │  7.9032131810955235 │\n│ 882a100ee5fffff │ 13.650664869721473 │ 21.770178571428573 │     8.1195137017071 │\n│ 882a107209fffff │  16.47866359447005 │ 24.767259036144576 │   8.288595441674527 │\n│ 882a100813fffff │ 16.437430167597764 │  25.61198275862069 │   9.174552591022927 │\n│ 882a100d03fffff │ 12.004190371991243 │  21.60202522775052 │   9.597834855759277 │\n│ 882a100ebbfffff │  39.36631964809384 │  53.30473029045641 │   13.93841064236257 │\n├─────────────────┴────────────────────┴────────────────────┴─────────────────────┤\n│ 426 rows (20 shown)                                                   4 columns │\n└─────────────────────────────────────────────────────────────────────────────────┘\n\n\n\nimport matplotlib.pyplot as plt\n\ndf = out.df()\n\nfig, ax = plt.subplots()\nax.plot([0,70], [0,70], color='k', linestyle='--')\ndf.plot.scatter(x='fare_jan', y='fare_feb', alpha=.6, ax=ax)\nplt.grid()\n\n\n\n\n\n\n\n\n\n\nEnd-to-end example"
  },
  {
    "objectID": "wizard.html",
    "href": "wizard.html",
    "title": "darkwing",
    "section": "",
    "text": "import pandas as pd\nimport darkwing as dw\n\n\ndf = pd.DataFrame({'a': [0]})\n\n\ntbl = dw.Table(df)\ntbl\n\n┌───────┐\n│   a   │\n│ int64 │\n├───────┤\n│     0 │\n└───────┘\n\n\n\ns = 'select columns(*) + 1'\ntbl.do(s,s,s)\n\n┌───────┐\n│   a   │\n│ int64 │\n├───────┤\n│     3 │\n└───────┘\n\n\n\ndef f(x):\n    return x.do(s,s,s)\n\n\ntbl.do(f)\n\n┌───────┐\n│   a   │\n│ int64 │\n├───────┤\n│     3 │\n└───────┘\n\n\n\nfew = [f, 'select columns(*) + 1', f, f, s]\ntbl.do(few)\n\n┌───────┐\n│   a   │\n│ int64 │\n├───────┤\n│    11 │\n└───────┘\n\n\n\ndef g(x):\n    return x.do(few)\n\ntbl.do(g)\n\n┌───────┐\n│   a   │\n│ int64 │\n├───────┤\n│    11 │\n└───────┘\n\n\n\ng = [f, 'select columns(*) + 1', f, f, s]\n\ntbl.do(g)\n\n┌───────┐\n│   a   │\n│ int64 │\n├───────┤\n│    11 │\n└───────┘\n\n\n\ntbl.alias('bam')\n\nDatabase:\n    bam: 1 x ['a']\n\n\n\ntbl.do('as bam')\n\nDatabase:\n    bam: 1 x ['a']"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "darkwing",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "darkwing",
    "section": "",
    "text": "import darkwing as dw\n\ndef foo(rel, res=6):\n    return rel.do(\n        'select pickup_latitude as lat, pickup_longitude as lng, tip_amount',\n        f'select h3_latlng_to_cell(lat, lng, {res}) as hexid, tip_amount as tip',\n        'select hexid, avg(tip) as tip group by 1',\n        'select h3_h3_to_string(hexid) as hexid, tip',\n        'where tip &gt; 0',\n    )\n\n\n# dw.Table('https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2010-01.parquet')\ndw.Table('data/yellow_tripdata_2010-01.parquet')\n\n┌───────────┬─────────────────────┬─────────────────────┬───┬────────────┬──────────────┬──────────────┐\n│ vendor_id │   pickup_datetime   │  dropoff_datetime   │ … │ tip_amount │ tolls_amount │ total_amount │\n│  varchar  │       varchar       │       varchar       │   │   double   │    double    │    double    │\n├───────────┼─────────────────────┼─────────────────────┼───┼────────────┼──────────────┼──────────────┤\n│ VTS       │ 2010-01-26 07:41:00 │ 2010-01-26 07:45:00 │ … │        0.0 │          0.0 │          5.0 │\n│ DDS       │ 2010-01-30 23:31:00 │ 2010-01-30 23:46:12 │ … │        0.0 │          0.0 │         16.3 │\n│ DDS       │ 2010-01-18 20:22:20 │ 2010-01-18 20:38:12 │ … │        0.0 │          0.0 │         12.7 │\n│ VTS       │ 2010-01-09 01:18:00 │ 2010-01-09 01:35:00 │ … │        0.0 │          0.0 │         14.3 │\n│ CMT       │ 2010-01-18 19:10:14 │ 2010-01-18 19:17:07 │ … │       0.87 │          0.0 │         6.67 │\n│ DDS       │ 2010-01-23 18:40:25 │ 2010-01-23 18:54:51 │ … │        1.0 │          0.0 │         12.0 │\n│ VTS       │ 2010-01-17 09:18:00 │ 2010-01-17 09:25:00 │ … │        0.0 │          0.0 │          6.6 │\n│ VTS       │ 2010-01-09 13:49:00 │ 2010-01-09 13:56:00 │ … │        0.0 │          0.0 │          7.4 │\n│ VTS       │ 2010-01-09 00:25:00 │ 2010-01-09 00:39:00 │ … │        0.0 │          0.0 │         12.3 │\n│ VTS       │ 2010-01-27 18:15:00 │ 2010-01-27 18:29:00 │ … │        2.0 │          0.0 │         12.0 │\n│  ·        │          ·          │          ·          │ · │         ·  │           ·  │           ·  │\n│  ·        │          ·          │          ·          │ · │         ·  │           ·  │           ·  │\n│  ·        │          ·          │          ·          │ · │         ·  │           ·  │           ·  │\n│ CMT       │ 2010-01-29 10:10:30 │ 2010-01-29 10:16:54 │ … │       1.32 │          0.0 │         7.92 │\n│ CMT       │ 2010-01-04 20:25:15 │ 2010-01-04 20:46:17 │ … │       4.06 │          0.0 │        24.36 │\n│ VTS       │ 2010-01-07 17:57:00 │ 2010-01-07 18:07:00 │ … │        0.0 │          0.0 │          9.6 │\n│ VTS       │ 2010-01-08 00:08:00 │ 2010-01-08 00:22:00 │ … │        1.5 │          0.0 │         12.6 │\n│ CMT       │ 2010-01-31 20:36:38 │ 2010-01-31 20:58:12 │ … │        3.0 │          0.0 │         21.7 │\n│ CMT       │ 2010-01-16 11:03:42 │ 2010-01-16 11:14:46 │ … │        0.0 │          0.0 │          9.0 │\n│ CMT       │ 2010-01-05 08:56:30 │ 2010-01-05 09:04:29 │ … │        0.0 │          0.0 │          6.6 │\n│ CMT       │ 2010-01-08 08:40:48 │ 2010-01-08 09:04:44 │ … │        2.0 │          0.0 │         21.8 │\n│ CMT       │ 2010-01-08 07:06:21 │ 2010-01-08 07:13:34 │ … │        0.0 │          0.0 │          7.0 │\n│ VTS       │ 2010-01-09 03:09:00 │ 2010-01-09 03:18:00 │ … │        0.0 │          0.0 │         10.7 │\n├───────────┴─────────────────────┴─────────────────────┴───┴────────────┴──────────────┴──────────────┤\n│ ? rows (&gt;9999 rows, 20 shown)                                                   18 columns (6 shown) │\n└──────────────────────────────────────────────────────────────────────────────────────────────────────┘\n\n\n\n# (dw.Table('https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2010-01.parquet')\ndw.Table('data/yellow_tripdata_2010-01.parquet').do(\n    'select *, pickup_latitude as lat, pickup_longitude as lng',\n    'select *, h3_latlng_to_cell(lat, lng, 8) as hexid',\n    'select hexid, avg(tip_amount) as tip  group by 1',\n    'select h3_h3_to_string(hexid) as hexid, tip',\n    'where tip between 10 and 20',\n    'order by hexid',\n)\n\n┌─────────────────┬────────────────────┐\n│      hexid      │        tip         │\n│     varchar     │       double       │\n├─────────────────┼────────────────────┤\n│ 881bb2a0b5fffff │              12.22 │\n│ 882a100299fffff │  10.02818181818182 │\n│ 882a10029dfffff │ 11.666666666666666 │\n│ 882a1002c3fffff │               10.0 │\n│ 882a10034bfffff │               16.0 │\n│ 882a100353fffff │               17.6 │\n│ 882a10045bfffff │               10.0 │\n│ 882a100487fffff │             11.525 │\n│ 882a10060dfffff │               16.1 │\n│ 882a100611fffff │               10.0 │\n│        ·        │                 ·  │\n│        ·        │                 ·  │\n│        ·        │                 ·  │\n│ 882a13c4d9fffff │               11.5 │\n│ 882a13d281fffff │               20.0 │\n│ 882a13d529fffff │               15.0 │\n│ 882a1438c3fffff │               10.0 │\n│ 882a15663bfffff │               10.0 │\n│ 882a1ab9c1fffff │              10.01 │\n│ 882a353927fffff │              11.05 │\n│ 882aa16327fffff │              12.51 │\n│ 882aaab9ebfffff │              10.01 │\n│ 882ad09327fffff │              12.51 │\n├─────────────────┴────────────────────┤\n│ 193 rows (20 shown)        2 columns │\n└──────────────────────────────────────┘\n\n\n\ndw.Table('data/yellow_tripdata_2010-01.parquet').do(\n    'select *, pickup_latitude as lat, pickup_longitude as lng',\n    'select *, h3_latlng_to_cell(lat, lng, 8) as hexid',\n    'select hexid, avg(tip_amount) as tip  group by 1',\n    'select h3_h3_to_string(hexid) as hexid, tip',\n    'where tip between 10 and 20',\n    'order by hexid',\n)\n\n┌─────────────────┬────────────────────┐\n│      hexid      │        tip         │\n│     varchar     │       double       │\n├─────────────────┼────────────────────┤\n│ 881bb2a0b5fffff │              12.22 │\n│ 882a100299fffff │  10.02818181818182 │\n│ 882a10029dfffff │ 11.666666666666666 │\n│ 882a1002c3fffff │               10.0 │\n│ 882a10034bfffff │               16.0 │\n│ 882a100353fffff │               17.6 │\n│ 882a10045bfffff │               10.0 │\n│ 882a100487fffff │             11.525 │\n│ 882a10060dfffff │               16.1 │\n│ 882a100611fffff │               10.0 │\n│        ·        │                 ·  │\n│        ·        │                 ·  │\n│        ·        │                 ·  │\n│ 882a13c4d9fffff │               11.5 │\n│ 882a13d281fffff │               20.0 │\n│ 882a13d529fffff │               15.0 │\n│ 882a1438c3fffff │               10.0 │\n│ 882a15663bfffff │               10.0 │\n│ 882a1ab9c1fffff │              10.01 │\n│ 882a353927fffff │              11.05 │\n│ 882aa16327fffff │              12.51 │\n│ 882aaab9ebfffff │              10.01 │\n│ 882ad09327fffff │              12.51 │\n├─────────────────┴────────────────────┤\n│ 193 rows (20 shown)        2 columns │\n└──────────────────────────────────────┘\n\n\n\ndw.Table('data/yellow_tripdata_2010-01.parquet').do(\n    'select *, pickup_latitude as lat, pickup_longitude as lng',\n).do(\n    'select *, h3_latlng_to_cell(lat, lng, 8) as hexid',\n).do(\n    'select hexid, avg(tip_amount) as tip  group by 1',\n).do(\n    'select h3_h3_to_string(hexid) as hexid, tip',\n).do(\n   'where tip between 10 and 20',\n).do(\n    'order by hexid',\n)\n\n┌─────────────────┬────────────────────┐\n│      hexid      │        tip         │\n│     varchar     │       double       │\n├─────────────────┼────────────────────┤\n│ 881bb2a0b5fffff │              12.22 │\n│ 882a100299fffff │  10.02818181818182 │\n│ 882a10029dfffff │ 11.666666666666666 │\n│ 882a1002c3fffff │               10.0 │\n│ 882a10034bfffff │               16.0 │\n│ 882a100353fffff │               17.6 │\n│ 882a10045bfffff │               10.0 │\n│ 882a100487fffff │             11.525 │\n│ 882a10060dfffff │               16.1 │\n│ 882a100611fffff │               10.0 │\n│        ·        │                 ·  │\n│        ·        │                 ·  │\n│        ·        │                 ·  │\n│ 882a13c4d9fffff │               11.5 │\n│ 882a13d281fffff │               20.0 │\n│ 882a13d529fffff │               15.0 │\n│ 882a1438c3fffff │               10.0 │\n│ 882a15663bfffff │               10.0 │\n│ 882a1ab9c1fffff │              10.01 │\n│ 882a353927fffff │              11.05 │\n│ 882aa16327fffff │              12.51 │\n│ 882aaab9ebfffff │              10.01 │\n│ 882ad09327fffff │              12.51 │\n├─────────────────┴────────────────────┤\n│ 193 rows (20 shown)        2 columns │\n└──────────────────────────────────────┘\n\n\n\nrel1 = dw.Table('data/yellow_tripdata_2010-01.parquet') # lazy load!\nrel2 = dw.Table('data/yellow_tripdata_2010-02.parquet') # lazy load!\n\n\nrel1\n\n┌───────────┬─────────────────────┬─────────────────────┬───┬────────────┬──────────────┬──────────────┐\n│ vendor_id │   pickup_datetime   │  dropoff_datetime   │ … │ tip_amount │ tolls_amount │ total_amount │\n│  varchar  │       varchar       │       varchar       │   │   double   │    double    │    double    │\n├───────────┼─────────────────────┼─────────────────────┼───┼────────────┼──────────────┼──────────────┤\n│ VTS       │ 2010-01-26 07:41:00 │ 2010-01-26 07:45:00 │ … │        0.0 │          0.0 │          5.0 │\n│ DDS       │ 2010-01-30 23:31:00 │ 2010-01-30 23:46:12 │ … │        0.0 │          0.0 │         16.3 │\n│ DDS       │ 2010-01-18 20:22:20 │ 2010-01-18 20:38:12 │ … │        0.0 │          0.0 │         12.7 │\n│ VTS       │ 2010-01-09 01:18:00 │ 2010-01-09 01:35:00 │ … │        0.0 │          0.0 │         14.3 │\n│ CMT       │ 2010-01-18 19:10:14 │ 2010-01-18 19:17:07 │ … │       0.87 │          0.0 │         6.67 │\n│ DDS       │ 2010-01-23 18:40:25 │ 2010-01-23 18:54:51 │ … │        1.0 │          0.0 │         12.0 │\n│ VTS       │ 2010-01-17 09:18:00 │ 2010-01-17 09:25:00 │ … │        0.0 │          0.0 │          6.6 │\n│ VTS       │ 2010-01-09 13:49:00 │ 2010-01-09 13:56:00 │ … │        0.0 │          0.0 │          7.4 │\n│ VTS       │ 2010-01-09 00:25:00 │ 2010-01-09 00:39:00 │ … │        0.0 │          0.0 │         12.3 │\n│ VTS       │ 2010-01-27 18:15:00 │ 2010-01-27 18:29:00 │ … │        2.0 │          0.0 │         12.0 │\n│  ·        │          ·          │          ·          │ · │         ·  │           ·  │           ·  │\n│  ·        │          ·          │          ·          │ · │         ·  │           ·  │           ·  │\n│  ·        │          ·          │          ·          │ · │         ·  │           ·  │           ·  │\n│ CMT       │ 2010-01-29 10:10:30 │ 2010-01-29 10:16:54 │ … │       1.32 │          0.0 │         7.92 │\n│ CMT       │ 2010-01-04 20:25:15 │ 2010-01-04 20:46:17 │ … │       4.06 │          0.0 │        24.36 │\n│ VTS       │ 2010-01-07 17:57:00 │ 2010-01-07 18:07:00 │ … │        0.0 │          0.0 │          9.6 │\n│ VTS       │ 2010-01-08 00:08:00 │ 2010-01-08 00:22:00 │ … │        1.5 │          0.0 │         12.6 │\n│ CMT       │ 2010-01-31 20:36:38 │ 2010-01-31 20:58:12 │ … │        3.0 │          0.0 │         21.7 │\n│ CMT       │ 2010-01-16 11:03:42 │ 2010-01-16 11:14:46 │ … │        0.0 │          0.0 │          9.0 │\n│ CMT       │ 2010-01-05 08:56:30 │ 2010-01-05 09:04:29 │ … │        0.0 │          0.0 │          6.6 │\n│ CMT       │ 2010-01-08 08:40:48 │ 2010-01-08 09:04:44 │ … │        2.0 │          0.0 │         21.8 │\n│ CMT       │ 2010-01-08 07:06:21 │ 2010-01-08 07:13:34 │ … │        0.0 │          0.0 │          7.0 │\n│ VTS       │ 2010-01-09 03:09:00 │ 2010-01-09 03:18:00 │ … │        0.0 │          0.0 │         10.7 │\n├───────────┴─────────────────────┴─────────────────────┴───┴────────────┴──────────────┴──────────────┤\n│ ? rows (&gt;9999 rows, 20 shown)                                                   18 columns (6 shown) │\n└──────────────────────────────────────────────────────────────────────────────────────────────────────┘\n\n\n\nrel1.do(\n    'select arbitrary(columns(*))',\n    dict,\n)\n\n{'vendor_id': 'VTS',\n 'pickup_datetime': '2010-01-22 18:42:00',\n 'dropoff_datetime': '2010-01-22 19:02:00',\n 'passenger_count': np.int64(5),\n 'trip_distance': np.float64(6.17),\n 'pickup_longitude': np.float64(-73.950947),\n 'pickup_latitude': np.float64(40.779223),\n 'rate_code': '1',\n 'store_and_fwd_flag': None,\n 'dropoff_longitude': np.float64(-73.987053),\n 'dropoff_latitude': np.float64(40.72531),\n 'payment_type': 'CAS',\n 'fare_amount': np.float64(17.3),\n 'surcharge': np.float64(1.0),\n 'mta_tax': np.float64(0.5),\n 'tip_amount': np.float64(0.0),\n 'tolls_amount': np.float64(0.0),\n 'total_amount': np.float64(18.8)}\n\n\n\nrel1.do('select count()').do(int)\n\n14863778\n\n\n\nrel1.do(\n    'select count()',\n    int,\n)\n\n14863778\n\n\n\n# TODO: why isn't this lazy?\n# rel3 = 'https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2010-01.parquet' &gt;&gt; dw.load\n\n\nrel4 = dw.Table('data/yellow_tripdata_2010-01.parquet')\nrel4\n\n┌───────────┬─────────────────────┬─────────────────────┬───┬────────────┬──────────────┬──────────────┐\n│ vendor_id │   pickup_datetime   │  dropoff_datetime   │ … │ tip_amount │ tolls_amount │ total_amount │\n│  varchar  │       varchar       │       varchar       │   │   double   │    double    │    double    │\n├───────────┼─────────────────────┼─────────────────────┼───┼────────────┼──────────────┼──────────────┤\n│ VTS       │ 2010-01-26 07:41:00 │ 2010-01-26 07:45:00 │ … │        0.0 │          0.0 │          5.0 │\n│ DDS       │ 2010-01-30 23:31:00 │ 2010-01-30 23:46:12 │ … │        0.0 │          0.0 │         16.3 │\n│ DDS       │ 2010-01-18 20:22:20 │ 2010-01-18 20:38:12 │ … │        0.0 │          0.0 │         12.7 │\n│ VTS       │ 2010-01-09 01:18:00 │ 2010-01-09 01:35:00 │ … │        0.0 │          0.0 │         14.3 │\n│ CMT       │ 2010-01-18 19:10:14 │ 2010-01-18 19:17:07 │ … │       0.87 │          0.0 │         6.67 │\n│ DDS       │ 2010-01-23 18:40:25 │ 2010-01-23 18:54:51 │ … │        1.0 │          0.0 │         12.0 │\n│ VTS       │ 2010-01-17 09:18:00 │ 2010-01-17 09:25:00 │ … │        0.0 │          0.0 │          6.6 │\n│ VTS       │ 2010-01-09 13:49:00 │ 2010-01-09 13:56:00 │ … │        0.0 │          0.0 │          7.4 │\n│ VTS       │ 2010-01-09 00:25:00 │ 2010-01-09 00:39:00 │ … │        0.0 │          0.0 │         12.3 │\n│ VTS       │ 2010-01-27 18:15:00 │ 2010-01-27 18:29:00 │ … │        2.0 │          0.0 │         12.0 │\n│  ·        │          ·          │          ·          │ · │         ·  │           ·  │           ·  │\n│  ·        │          ·          │          ·          │ · │         ·  │           ·  │           ·  │\n│  ·        │          ·          │          ·          │ · │         ·  │           ·  │           ·  │\n│ CMT       │ 2010-01-29 10:10:30 │ 2010-01-29 10:16:54 │ … │       1.32 │          0.0 │         7.92 │\n│ CMT       │ 2010-01-04 20:25:15 │ 2010-01-04 20:46:17 │ … │       4.06 │          0.0 │        24.36 │\n│ VTS       │ 2010-01-07 17:57:00 │ 2010-01-07 18:07:00 │ … │        0.0 │          0.0 │          9.6 │\n│ VTS       │ 2010-01-08 00:08:00 │ 2010-01-08 00:22:00 │ … │        1.5 │          0.0 │         12.6 │\n│ CMT       │ 2010-01-31 20:36:38 │ 2010-01-31 20:58:12 │ … │        3.0 │          0.0 │         21.7 │\n│ CMT       │ 2010-01-16 11:03:42 │ 2010-01-16 11:14:46 │ … │        0.0 │          0.0 │          9.0 │\n│ CMT       │ 2010-01-05 08:56:30 │ 2010-01-05 09:04:29 │ … │        0.0 │          0.0 │          6.6 │\n│ CMT       │ 2010-01-08 08:40:48 │ 2010-01-08 09:04:44 │ … │        2.0 │          0.0 │         21.8 │\n│ CMT       │ 2010-01-08 07:06:21 │ 2010-01-08 07:13:34 │ … │        0.0 │          0.0 │          7.0 │\n│ VTS       │ 2010-01-09 03:09:00 │ 2010-01-09 03:18:00 │ … │        0.0 │          0.0 │         10.7 │\n├───────────┴─────────────────────┴─────────────────────┴───┴────────────┴──────────────┴──────────────┤\n│ ? rows (&gt;9999 rows, 20 shown)                                                   18 columns (6 shown) │\n└──────────────────────────────────────────────────────────────────────────────────────────────────────┘\n\n\n\nrel1.do(foo)\n\n┌─────────────────┬─────────────────────┐\n│      hexid      │         tip         │\n│     varchar     │       double        │\n├─────────────────┼─────────────────────┤\n│ 862a103b7ffffff │  2.4400652448557016 │\n│ 862a100efffffff │  1.2719552715654947 │\n│ 862a10777ffffff │  0.7949552868931107 │\n│ 862a10637ffffff │  0.6767346938775509 │\n│ 862a100afffffff │  0.8011410655084678 │\n│ 862a10007ffffff │  0.6793565683646112 │\n│ 863973107ffffff │ 0.35714285714285715 │\n│ 862a10097ffffff │  1.5857277882797731 │\n│ 862a330afffffff │ 0.25384615384615383 │\n│ 862a1021fffffff │ 0.44750000000000006 │\n│        ·        │                  ·  │\n│        ·        │                  ·  │\n│        ·        │                  ·  │\n│ 8666e0aafffffff │                 0.5 │\n│ 862a1152fffffff │                 2.0 │\n│ 862b8da5fffffff │                 1.4 │\n│ 862a112cfffffff │                6.18 │\n│ 862a15827ffffff │                 1.5 │\n│ 862a307b7ffffff │                1.55 │\n│ 862a1a237ffffff │                 1.0 │\n│ 862a11737ffffff │                4.08 │\n│ 862a118a7ffffff │                 3.0 │\n│ 862bb362fffffff │                2.15 │\n├─────────────────┴─────────────────────┤\n│ 850 rows (20 shown)         2 columns │\n└───────────────────────────────────────┘\n\n\n\nfoo(rel1)\n\n┌─────────────────┬────────────────────┐\n│      hexid      │        tip         │\n│     varchar     │       double       │\n├─────────────────┼────────────────────┤\n│ 862a103b7ffffff │ 2.4400652448557016 │\n│ 862a100afffffff │ 0.8011410655084679 │\n│ 862a100efffffff │  1.271955271565495 │\n│ 862a10777ffffff │ 0.7949552868931108 │\n│ 862a10b1fffffff │                4.0 │\n│ 862a10ccfffffff │ 0.8404166666666666 │\n│ 862a10097ffffff │  1.585727788279773 │\n│ 862a1022fffffff │ 1.1291666666666667 │\n│ 862a10007ffffff │ 0.6793565683646112 │\n│ 862a10297ffffff │ 0.7737313432835821 │\n│        ·        │                 ·  │\n│        ·        │                 ·  │\n│        ·        │                 ·  │\n│ 862aa0dafffffff │                2.5 │\n│ 862ac6347ffffff │               0.76 │\n│ 86397281fffffff │                2.0 │\n│ 862a5421fffffff │               3.08 │\n│ 862b1c667ffffff │               1.96 │\n│ 862b8db6fffffff │                1.4 │\n│ 862b8b00fffffff │                4.0 │\n│ 862b8b057ffffff │               6.07 │\n│ 862aa956fffffff │                1.0 │\n│ 862a84c1fffffff │                4.0 │\n├─────────────────┴────────────────────┤\n│ 850 rows (20 shown)        2 columns │\n└──────────────────────────────────────┘\n\n\n\nout = dw.Database(\n    rel1 = foo(rel1),\n    rel2 = rel2.do(foo),\n)\nout\n\nDatabase:\n    rel1: 850 x ['hexid', 'tip']\n    rel2: 731 x ['hexid', 'tip']\n\n\n\nout = dw.Database(\n    rel1 = foo(rel1),\n    rel2 = foo(rel2),\n).do(\"\"\"\nselect\n    hexid,\n    rel1.tip\n        as tip1,\n    rel2.tip\n        as tip2,\nfrom rel1\nfull outer join rel2\nusing (hexid)\n\"\"\")\n\nout.do(\n    'where tip1 is not null and tip2 is not null',\n    'select *, tip1-tip2 as diff order by diff',\n    'as bam',\n)\n\nDatabase:\n    bam: 371 x ['hexid', 'tip1', 'tip2', 'diff']\n\n\n\nrel1 = dw.Table('data/yellow_tripdata_2010-01.parquet')\n\n\nrel1.rel\n\n┌───────────┬─────────────────────┬─────────────────────┬───┬────────────┬──────────────┬──────────────┐\n│ vendor_id │   pickup_datetime   │  dropoff_datetime   │ … │ tip_amount │ tolls_amount │ total_amount │\n│  varchar  │       varchar       │       varchar       │   │   double   │    double    │    double    │\n├───────────┼─────────────────────┼─────────────────────┼───┼────────────┼──────────────┼──────────────┤\n│ VTS       │ 2010-01-26 07:41:00 │ 2010-01-26 07:45:00 │ … │        0.0 │          0.0 │          5.0 │\n│ DDS       │ 2010-01-30 23:31:00 │ 2010-01-30 23:46:12 │ … │        0.0 │          0.0 │         16.3 │\n│ DDS       │ 2010-01-18 20:22:20 │ 2010-01-18 20:38:12 │ … │        0.0 │          0.0 │         12.7 │\n│ VTS       │ 2010-01-09 01:18:00 │ 2010-01-09 01:35:00 │ … │        0.0 │          0.0 │         14.3 │\n│ CMT       │ 2010-01-18 19:10:14 │ 2010-01-18 19:17:07 │ … │       0.87 │          0.0 │         6.67 │\n│ DDS       │ 2010-01-23 18:40:25 │ 2010-01-23 18:54:51 │ … │        1.0 │          0.0 │         12.0 │\n│ VTS       │ 2010-01-17 09:18:00 │ 2010-01-17 09:25:00 │ … │        0.0 │          0.0 │          6.6 │\n│ VTS       │ 2010-01-09 13:49:00 │ 2010-01-09 13:56:00 │ … │        0.0 │          0.0 │          7.4 │\n│ VTS       │ 2010-01-09 00:25:00 │ 2010-01-09 00:39:00 │ … │        0.0 │          0.0 │         12.3 │\n│ VTS       │ 2010-01-27 18:15:00 │ 2010-01-27 18:29:00 │ … │        2.0 │          0.0 │         12.0 │\n│  ·        │          ·          │          ·          │ · │         ·  │           ·  │           ·  │\n│  ·        │          ·          │          ·          │ · │         ·  │           ·  │           ·  │\n│  ·        │          ·          │          ·          │ · │         ·  │           ·  │           ·  │\n│ CMT       │ 2010-01-29 10:10:30 │ 2010-01-29 10:16:54 │ … │       1.32 │          0.0 │         7.92 │\n│ CMT       │ 2010-01-04 20:25:15 │ 2010-01-04 20:46:17 │ … │       4.06 │          0.0 │        24.36 │\n│ VTS       │ 2010-01-07 17:57:00 │ 2010-01-07 18:07:00 │ … │        0.0 │          0.0 │          9.6 │\n│ VTS       │ 2010-01-08 00:08:00 │ 2010-01-08 00:22:00 │ … │        1.5 │          0.0 │         12.6 │\n│ CMT       │ 2010-01-31 20:36:38 │ 2010-01-31 20:58:12 │ … │        3.0 │          0.0 │         21.7 │\n│ CMT       │ 2010-01-16 11:03:42 │ 2010-01-16 11:14:46 │ … │        0.0 │          0.0 │          9.0 │\n│ CMT       │ 2010-01-05 08:56:30 │ 2010-01-05 09:04:29 │ … │        0.0 │          0.0 │          6.6 │\n│ CMT       │ 2010-01-08 08:40:48 │ 2010-01-08 09:04:44 │ … │        2.0 │          0.0 │         21.8 │\n│ CMT       │ 2010-01-08 07:06:21 │ 2010-01-08 07:13:34 │ … │        0.0 │          0.0 │          7.0 │\n│ VTS       │ 2010-01-09 03:09:00 │ 2010-01-09 03:18:00 │ … │        0.0 │          0.0 │         10.7 │\n├───────────┴─────────────────────┴─────────────────────┴───┴────────────┴──────────────┴──────────────┤\n│ ? rows (&gt;9999 rows, 20 shown)                                                   18 columns (6 shown) │\n└──────────────────────────────────────────────────────────────────────────────────────────────────────┘\n\n\n\nout = dw.Database(\n    rel1 = 'data/yellow_tripdata_2010-01.parquet',\n    # rel1 = 'https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2010-01.parquet',\n    rel2 = 'data/yellow_tripdata_2010-02.parquet',\n)\n\n\nout\n\nDatabase:\n    rel1: 'data/yellow_tripdata_2010-01.parquet'\n    rel2: 'data/yellow_tripdata_2010-02.parquet'\n\n\n\nout['rel1']\n\n'data/yellow_tripdata_2010-01.parquet'\n\n\n\nout2 = out.do('pandas')\n\n\nout2\n\nDatabase:\n    rel1: 14863778 x ['vendor_id', 'pickup_datetime', 'dropoff_datetime', 'passenger_count', 'trip_distance', 'pickup_longitude', 'pickup_latitude', 'rate_code', 'store_and_fwd_flag', 'dropoff_longitude', 'dropoff_latitude', 'payment_type', 'fare_amount', 'surcharge', 'mta_tax', 'tip_amount', 'tolls_amount', 'total_amount']\n    rel2: 11145409 x ['vendor_id', 'pickup_datetime', 'dropoff_datetime', 'passenger_count', 'trip_distance', 'pickup_longitude', 'pickup_latitude', 'rate_code', 'store_and_fwd_flag', 'dropoff_longitude', 'dropoff_latitude', 'payment_type', 'fare_amount', 'surcharge', 'mta_tax', 'tip_amount', 'tolls_amount', 'total_amount', '__index_level_0__']\n\n\n\nout2['rel1']\n\n\n\n\n\n\n\n\nvendor_id\npickup_datetime\ndropoff_datetime\npassenger_count\ntrip_distance\npickup_longitude\npickup_latitude\nrate_code\nstore_and_fwd_flag\ndropoff_longitude\ndropoff_latitude\npayment_type\nfare_amount\nsurcharge\nmta_tax\ntip_amount\ntolls_amount\ntotal_amount\n\n\n\n\n0\nVTS\n2010-01-26 07:41:00\n2010-01-26 07:45:00\n1\n0.75\n-73.956778\n40.767750\n1\nNone\n-73.965957\n40.765232\nCAS\n4.5\n0.0\n0.5\n0.00\n0.0\n5.00\n\n\n1\nDDS\n2010-01-30 23:31:00\n2010-01-30 23:46:12\n1\n5.90\n-73.996118\n40.763932\n1\nNone\n-73.981512\n40.741193\nCAS\n15.3\n0.5\n0.5\n0.00\n0.0\n16.30\n\n\n2\nDDS\n2010-01-18 20:22:20\n2010-01-18 20:38:12\n1\n4.00\n-73.979673\n40.783790\n1\nNone\n-73.917852\n40.878560\nCAS\n11.7\n0.5\n0.5\n0.00\n0.0\n12.70\n\n\n3\nVTS\n2010-01-09 01:18:00\n2010-01-09 01:35:00\n2\n4.70\n-73.977922\n40.763997\n1\nNone\n-73.923908\n40.759725\nCAS\n13.3\n0.5\n0.5\n0.00\n0.0\n14.30\n\n\n4\nCMT\n2010-01-18 19:10:14\n2010-01-18 19:17:07\n1\n0.60\n-73.990924\n40.734682\n1\n0\n-73.995511\n40.739088\nCre\n5.3\n0.0\n0.5\n0.87\n0.0\n6.67\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n14863773\nCMT\n2010-01-06 14:51:19\n2010-01-06 15:02:59\n2\n1.50\n-73.970436\n40.757928\n1\n0\n-73.957113\n40.764094\nCas\n7.7\n0.0\n0.5\n0.00\n0.0\n8.20\n\n\n14863774\nVTS\n2010-01-09 12:52:00\n2010-01-09 13:15:00\n1\n16.77\n-73.784115\n40.648632\n1\nNone\n-73.974673\n40.750805\nCAS\n45.0\n0.0\n0.5\n0.00\n0.0\n45.50\n\n\n14863775\nCMT\n2010-01-09 14:00:44\n2010-01-09 14:14:33\n1\n0.90\n-74.002170\n40.721619\n1\n0\n-73.988528\n40.721484\nCas\n8.1\n0.0\n0.5\n0.00\n0.0\n8.60\n\n\n14863776\nCMT\n2010-01-09 09:52:23\n2010-01-09 09:59:41\n1\n2.00\n-73.980066\n40.770469\n1\n0\n-73.958075\n40.783242\nCas\n7.3\n0.0\n0.5\n0.00\n0.0\n7.80\n\n\n14863777\nCMT\n2010-01-05 15:25:59\n2010-01-05 15:33:54\n1\n1.00\n-73.979463\n40.739982\n1\n0\n-73.994477\n40.739006\nCas\n6.1\n0.0\n0.5\n0.00\n0.0\n6.60\n\n\n\n\n14863778 rows × 18 columns"
  }
]